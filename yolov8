# -*- coding: utf-8 -*-
"""Copy of lungcancer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12RtKVFrGk48bI_mVEUw6YXIQFqFK8WB4
"""

!pip install ultralytics

import ultralytics
from ultralytics import YOLO
model = YOLO('yolov8m.pt')

import yaml
import os
from zipfile import ZipFile

# Upload the zip file
from google.colab import files
uploaded = files.upload()

# Extract the zip file
for zip_file in uploaded.keys():
    with ZipFile(zip_file, 'r') as zip_ref:
        zip_ref.extractall('/content')

# Define base path
base_path = '/content/ct_images'

# Define paths
train_images_path = os.path.join(base_path, 'images/train')
val_images_path = os.path.join(base_path, 'images/val')
train_labels_path = os.path.join(base_path, 'labels/train')
val_labels_path = os.path.join(base_path, 'labels/val')

# Check if paths exist
if not os.path.exists(train_images_path):
    print(f"Training images path does not exist: {train_images_path}")
if not os.path.exists(val_images_path):
    print(f"Validation images path does not exist: {val_images_path}")
if not os.path.exists(train_labels_path):
    print(f"Training labels path does not exist: {train_labels_path}")
if not os.path.exists(val_labels_path):
    print(f"Validation labels path does not exist: {val_labels_path}")

# Number of classes and class names (modify according to your dataset)
num_classes = 2
class_names = ['class1', 'class2']

# Create the data.yaml content
data_config = {
    'path': base_path,
    'train': 'images/train',
    'val': 'images/val',
    'names': class_names,
    'nc': num_classes
}

# Save the data.yaml file
data_yaml_path = os.path.join(base_path, 'data.yaml')
with open(data_yaml_path, 'w') as yaml_file:
    yaml.dump(data_config, yaml_file, default_flow_style=False)

print(f'data.yaml created at {data_yaml_path}')

from ultralytics import YOLO

# Define the path to the data.yaml file
data_yaml_path = '/content/ct_images/data.yaml'

# Initialize the model
model = YOLO('yolov8n.pt')  # Choose the appropriate YOLOv8 model variant

# Train the model
model.train(data=data_yaml_path, epochs=5, seed=42, optimizer='Adam')

model.train(data=data_yaml_path, seed=42,epochs=5,optimizer='SGD',lr0=0.001)

model.train(data=data_yaml_path,seed=42,epochs=15,lr0=0.001)

model.train(data=data_yaml_path,seed=42,epochs=50,lr0=0.001)

import pandas as pd
import numpy as np
import PIL
from PIL import Image
from IPython.display import display
import matplotlib.pyplot as plt
from glob import glob
import random
import cv2
import warnings
warnings.simplefilter('ignore')

import os
import random
from glob import glob
import matplotlib.pyplot as plt
import cv2

# Define root path
root_path = '/content/ct_images/images/val/*'

# Number of samples to display
num_samples = 4

# Get list of image paths
images_data = glob(root_path)

# Check if the number of samples is greater than the available images
if num_samples > len(images_data):
    num_samples = len(images_data)
    print(f"Number of samples requested is larger than available images. Displaying {num_samples} images instead.")

# Randomly sample images
random_image = random.sample(images_data, num_samples)

# Display the images
plt.figure(figsize=(12,10))
for i in range(num_samples):
    plt.subplot(2, 2, i+1)
    img = cv2.imread(random_image[i])
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # Convert image to RGB format
    plt.imshow(img)
    plt.axis('off')

plt.show()

images = []
for i in range(num_samples):
    yolo_outputs = model.predict(random_image[i])
    output = yolo_outputs[0]
    box = output.boxes
    names = output.names
    print('**********************')
    for j in range(len(box)):
        labels = names[box.cls[j].item()]
        coordinates = box.xyxy[j].tolist()
        confidence = np.round(box.conf[j].item(), 2)
        print(f'In this image {len(box)} lungcancer has been detected.')
        print(f'lung {j + 1} is: {labels}')
        print(f'Coordinates are: {coordinates}')
        print(f'Confidence is: {confidence}')
        print('-------')

    # Store the image in the 'images' list
    images.append(output.plot()[:, :, ::-1])

plt.figure(figsize=(12,10))
for i, img in enumerate(images):
    plt.subplot(2, 2, i + 1)
    plt.imshow(img)
    plt.axis('off')

import os
import pandas as pd

# Step 1: List the contents of the `runs/detect` directory to find the training run directory
runs_dir = '/content/runs/detect'
training_run_dirs = os.listdir(runs_dir)
print("Training runs directories:", training_run_dirs)

# Assuming the latest training run is the last one in the list
latest_run_dir = training_run_dirs[-1]
print("Latest run directory:", latest_run_dir)

# Construct the path to the results.csv file
results_csv_path = os.path.join(runs_dir, latest_run_dir, 'results.csv')
print("Path to results.csv:", results_csv_path)

# Step 2: Read the CSV file
results_df = pd.read_csv(results_csv_path)

# Step 3: Display the first few rows of the DataFrame
print(results_df.head())

# Display the entire DataFrame in a more interactive way
from IPython.display import display
display(results_df)

result = pd.read_csv('/content/runs/detect/train222/results.csv')
result.head()

result.columns

# Remove leading and trailing spaces from column names
result.columns = result.columns.str.strip()

epoch_column = result['epoch']
box_train_losses = result['train/box_loss']
box_val_losses = result['val/box_loss']
cls_train_losses = result['train/cls_loss']
cls_val_losses = result['val/cls_loss']

plt.figure(figsize=(12,5))
plt.style.use('ggplot')  # You can choose a style you prefer
plt.subplot(1,2,1)
plt.plot(epoch_column, box_train_losses, label='train_losses')
plt.plot(epoch_column, box_val_losses, label='val_losses')
plt.grid(True, linestyle='--', linewidth=0.5, color='gray')# Add a grid
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Train and Validation Box Losses')
plt.legend()

plt.subplot(1,2,2)
plt.plot(epoch_column, cls_train_losses, label='train_losses')
plt.plot(epoch_column, cls_val_losses, label='val_losses')
plt.grid(True, linestyle='--', linewidth=0.5, color='gray')# Add a grid
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Train and Validation Class Losses')
plt.legend()
plt.show()

plt.figure(figsize=(12,8))
plt.imshow(cv2.imread('/content/runs/detect/train222/results.png'))
plt.axis('off')
